import logging
import re
import asyncio
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.fsm_storage.mongo import MongoStorage
from aiogram.dispatcher.filters import Text
from aiogram.types import KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hlink, link
import time

API_TOKEN = ''
id_chat_request = 0

#storage = MemoryStorage()
storage = MongoStorage('exchange_mongo')

currencies = ['üíé BTC (Bitcoin)']

payments = {
    '1Ô∏è‚É£ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥': ['–ê–ª—å—Ñ–∞–±–∞–Ω–∫', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', '–°–±–µ—Ä–±–∞–Ω–∫'],
    '2Ô∏è‚É£ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏': ['–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏', 'QIWI –∫–æ—à–µ–ª—ë–∫'],
    '3Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ': ['Cash-in –ê–ª—å—Ñ–∞–±–∞–Ω–∫', 'Cash-in –¢–∏–Ω—å–∫–æ—Ñ—Ñ']
}

wallet = ['–ê–ª—å—Ñ–∞–±–∞–Ω–∫', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', '–°–±–µ—Ä–±–∞–Ω–∫', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏', '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏', 'QIWI –∫–æ—à–µ–ª—ë–∫',
          '–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ', 'Cash-in –ê–ª—å—Ñ–∞–±–∞–Ω–∫', 'Cash-in –¢–∏–Ω—å–∫–æ—Ñ—Ñ']

inline_back_keyboard = types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='Back')

logging.basicConfig(level=logging.INFO)
support_link = hlink('[BEN] –ö—Ä–∏–ø—Ç–æ-–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                     'https://t.me/benefitsar_cryptosupport')
support_link_1 = hlink('[BEN] –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'https://t.me/benefitsar_support')
support_link_2 = hlink('–î–∂–æ–Ω–∏', 'https://t.me/J0ni88')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


async def check_time(message: types.Message, state: FSMContext):
    await state.update_data(time=int(time.time()))
    await asyncio.sleep(3600)
    if time.time() - (await state.get_data())['time'] > 3600:
        await bot.send_message(
            text=f'üïê –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–ª–∫–æ\n'
                 f'–ù–∞–∂–º–∏—Ç–µ ' + '<b>/start</b>' + ' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
            chat_id=message.chat.id,
            parse_mode="HTML")
        await soft_state_finish(state)


@dp.message_handler(lambda message: message.chat.id != message.from_user.id)
async def chats_handler(message: types.Message):
    if message.chat.id == id_chat_request:
        if 'reply_to_message' in message:
            user_id = int(re.findall(r"id: (\d+)",
                                 message.reply_to_message.text)[0])
            await bot.send_message(
                chat_id=user_id,
                text=f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ{(await storage.get_data(chat=user_id, user=user_id))['order_id']}:</b> \n"
                     f"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ "
                     f"–ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ "
                     f"–¥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
                     f"<b>{message.text}</b>",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                            callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
                        )]
                    ]
                ),
                parse_mode="HTML"
            )
            await message.reply(
                text='–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
                reply=True
            )


@dp.callback_query_handler(lambda query: query.data == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
async def accept_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=types.InlineKeyboardMarkup())
    await callback.message.reply(
        text='–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
        reply=False
    )
    await bot.send_message(
        chat_id=id_chat_request,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª"
             f" —Å–≤–æ—é –∑–∞—è–≤–∫—É. –ù–∞–∂–º–∏—Ç–µ –î–∞, –µ—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –ù–µ—Ç, "
             f"–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à—ë–ª",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text='–î–∞',
                    callback_data='–î–∞'
                ),
                    types.InlineKeyboardButton(
                        text='–ù–µ—Ç',
                        callback_data='–ù–µ—Ç'
                    )
                ]
            ]
        )
    )


@dp.callback_query_handler(lambda callback: callback.data == '–î–∞' and
                                            callback.message.chat.id !=
                                            callback.message.from_user.id)
async def accept_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text='–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞',
        reply_markup=types.InlineKeyboardMarkup()
    )
    user_id = int(re.findall(r"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (\d+)", callback.message.text)[0])
    await bot.send_message(
        chat_id=user_id,
        text='‚úÖ–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤—ë–ª —Å–¥–µ–ª–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è '
             '—Å—Ä–µ–¥—Å—Ç–≤.\n\n‚ùóÔ∏è–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –¥–æ 30 –º–∏–Ω—É—Ç.'
    )
    referrer = (await storage.get_data(chat=user_id, user=user_id))['referrer']
    score = int(
        (await storage.get_data(chat=user_id, user=user_id))['pribil'] * 0.1)
    if referrer:
        await bot.send_message(chat_id=referrer,
                               text="–ù–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: " + str(
                                   score) + " –±–∞–ª–ª–æ–≤.")
        score_current = (await storage.get_data(chat=referrer, user=referrer))[
            'score']
        print("score= " + str(score))
        print("score_current= " + str(score_current))
        print('sum= ' + str(score + score_current))
        await storage.update_data(chat_id=referrer, user=referrer,
                                  score=score_current + score)
    print("storage: ")
    print(await storage.get_data(chat=user_id, user=user_id))
    # await main_menu(message=callback.message, state=state)


@dp.callback_query_handler(lambda callback: callback.data == '–ù–µ—Ç' and
                                            callback.message.chat.id !=
                                            callback.message.from_user.id)
async def accept_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup()
    )
    user_id = int(re.findall(r"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (\d+)", callback.message.text)[0])
    await bot.send_message(
        chat_id=user_id,
        text=f'<b>–ó–∞—è–≤–∫–∞ ‚Ññ{(await storage.get_data(chat=user_id, user=user_id))["order_id"]}:</b> \n'
             f'ü§∑‚Äç‚ôÇÔ∏è –í–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–æ–º.\n\n'
             f'<b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:</b>\n'+support_link_2,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
                ),
                    types.InlineKeyboardButton(
                        text='–û—Ç–º–µ–Ω–∏—Ç—å',
                        callback_data='–û—Ç–º–µ–Ω–∏—Ç—å'
                    )]
            ]
        ),
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    # await check_time(callback.message, state)


@dp.callback_query_handler(lambda callback: callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å')
async def cancel_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text='–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        reply_markup=InlineKeyboardMarkup()
    )
    await main_menu(message=callback.message, state=state)
    await check_time(callback.message, state)


async def soft_state_finish(state: FSMContext):
    const_fields = ['referrer', 'referrals', 'score', 'time', 'order_id','pribil']
    current_data = await state.get_data()
    clean_data = {key: current_data[key] for key in const_fields if key in current_data}  # govnocode
    await state.set_data(clean_data)
    await state.set_state(None)


@dp.message_handler(commands=['Start', 'Help'], state="*")
async def main_menu(
        message: [types.Message, types.CallbackQuery], state: FSMContext,
        message_text='‚ùó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚ùó \n\n'
                     '–°–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–∞–Ω–∞–ª–∞ @ob_nal\n\n'
                     '–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –±–æ—Ç–∞, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å, '
                     '–∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å. \n\n' +
                     hlink('–ö–∞–Ω–∞–ª ¬´–û–±–Ω–∞–ª—å—â–∏–∫¬ª', 'https://t.me/ob_nal')):
    print("state in main_menu: ")
    print(await state.get_data())
    if 'referrer' not in (await state.get_data()):  # first /start for user
        await state.update_data(referrals=[])
        await state.update_data(score=0)
        referrer = re.findall(r"/start (\d+)", message.text)
        referrer = int(referrer[0]) if referrer else None
        await state.update_data(referrer=referrer)
        logging.info(f"New user: {message.from_user}, referral of {referrer}")
        if referrer:
            referrer_referrals = (await storage.get_data(
                chat=referrer, user=referrer))['referrals']
            referrer_referrals.append(message.from_user.id)
            await storage.update_data(chat=referrer, user=referrer,
                                      referrals=referrer_referrals)
            try:
                await bot.send_message(
                    chat_id=referrer,
                    text='–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è '
                         '–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                )
            except:
                pass
    await soft_state_finish(state)
    await bot.send_message(
        chat_id=message.chat.id,
        text=message_text,
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton('üí∞ –ö—É–ø–∏—Ç—å')],
                [KeyboardButton('üí∏ –ü—Ä–æ–¥–∞—Ç—å')],
                [KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')],
                [KeyboardButton('üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞')]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await check_time(message, state)


#,'1Ô∏è‚É£ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥','2Ô∏è‚É£ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏','3Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ',
# '–ê–ª—å—Ñ–∞–±–∞–Ω–∫', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', '–°–±–µ—Ä–±–∞–Ω–∫','–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏', 'QIWI –∫–æ—à–µ–ª—ë–∫','Cash-in –ê–ª—å—Ñ–∞–±–∞–Ω–∫', 'Cash-in –¢–∏–Ω—å–∫–æ—Ñ—Ñ','üíé BTC (Bitcoin)',
#'–î–∞','–ù–µ—Ç'
@dp.message_handler(text=['üí∞ –ö—É–ø–∏—Ç—å', 'üí∏ –ü—Ä–æ–¥–∞—Ç—å','üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞','üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
                    state='*')
async def check_main_menu(message: [types.Message, types.CallbackQuery], state: FSMContext):
    if 'referrer' not in await state.get_data() or 'referrals' not in await state.get_data():
        await main_menu(message,state)
    else:
        if message.text=='üí∞ –ö—É–ø–∏—Ç—å' or message.text=='üí∏ –ü—Ä–æ–¥–∞—Ç—å':
            await select_currency(message,state)
        if message.text=='üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
            await support(message,state)
        if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            await profile(message, state)





#  –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –º—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥ –∏–∑ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥–∞—Ç—å
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state=['üí∞ –ö—É–ø–∏—Ç—å', 'üí∏ –ü—Ä–æ–¥–∞—Ç—å'])
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(action=None)
    await callback.message.delete()
    await main_menu(callback.message, state)
    await check_time(callback.message, state)


# –∫–æ–¥ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥–∞—Ç—å
@dp.message_handler(Text(equals=['üí∞ –ö—É–ø–∏—Ç—å', 'üí∏ –ü—Ä–æ–¥–∞—Ç—å']), state='*')
async def select_currency(message: types.Message, state: FSMContext):
    await state.update_data(action=message.text)
    text = ''
    if message.text == 'üí∞ –ö—É–ø–∏—Ç—å':
        text = '–∫—É–ø–∏—Ç—å'
    if message.text == 'üí∏ –ü—Ä–æ–¥–∞—Ç—å':
        text = '–ø—Ä–æ–¥–∞—Ç—å'
    await message.answer(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ {text}',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in currencies + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state(message.text)
    await check_time(message, state)


#  –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É (BTC)
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state=currencies)
async def back_to_select_currency(
        callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(currency=None)
    text = ''
    if (await state.get_data())['action'] == 'üí∞ –ö—É–ø–∏—Ç—å':
        text = '–∫—É–ø–∏—Ç—å'
    if (await state.get_data())['action'] == 'üí∏ –ü—Ä–æ–¥–∞—Ç—å':
        text = '–ø—Ä–æ–¥–∞—Ç—å'
    await callback.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ "
             f"{text}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in currencies + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state((await state.get_data())['action'])
    await check_time(callback.message, state)


# –ö–æ–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É (BTC)
@dp.callback_query_handler(text=currencies, state=['üí∞ –ö—É–ø–∏—Ç—å', 'üí∏ –ü—Ä–æ–¥–∞—Ç—å'])
async def select_payment(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(currency=callback.data)
    response = requests.get('https://www.blockchain.com/ticker')
    value_buy = round(response.json()['RUB']['buy'] * 1.05, 2)
    value_sold = round(response.json()['RUB']['sell'] * 0.95, 2)

    pribil = value_buy - response.json()['RUB']['buy']
    await state.update_data(pribil=pribil)

    try:
        await storage.update_data(chat=(await state.get_data())['referrer'],
                                  user=(await state.get_data())['referrer'],
                                  pribil=pribil)
    except:
        pass

    await state.update_data(value_buy=value_buy)
    await state.update_data(value_sold=value_sold)
    real_payments = list(payments.keys())
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        real_payments.remove('3Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ')
    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=payment, callback_data=payment)]
                for payment in real_payments + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state(callback.data)
    await check_time(callback.message, state)


#  –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state=list(payments.keys()))
async def back_to_select_payment(callback: types.CallbackQuery,
                                 state: FSMContext):
    await state.update_data(payment=None)
    real_payments = list(payments.keys())
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        real_payments.remove('3Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ')
    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=payment, callback_data=payment)]
                for payment in real_payments + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state((await state.get_data())['currency'])
    await check_time(callback.message, state)


# –ö–æ–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text=payments, state=currencies)
async def select_payment_variant(
        callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(payment=callback.data)
    real_payments = list(payments[callback.data])
    await callback.message.edit_reply_markup(
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=payment, callback_data=payment)]
                for payment in real_payments + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state(callback.data)
    await check_time(callback.message, state)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ float
def is_not_float(value):
    try:
        float(value)
        return False
    except:
        return True


def is_float(value):
    try:
        float(value)
        return True
    except:
        return False


#  –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –±—ã–ª–∏ –≤ wallet
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state='num_sum')
async def back_to_select_wallet(callback: types.CallbackQuery,
                                state: FSMContext):
    await state.update_data(wallet=None)
    real_payments = list(payments[(await state.get_data())['payment']])
    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text=payment, callback_data=payment)]
                for payment in real_payments + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state((await state.get_data())['payment'])
    await check_time(callback.message, state)


# –ö–û–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω—É –∏–∑ wallet
@dp.callback_query_handler(text=wallet, state=list(payments.keys()))
async def select_payment_variant(
        callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(wallet=callback.data)
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    # –ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞—Ç—å
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        if ((await state.get_data())['wallet']).__eq__('–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏') or (
                (await state.get_data())['wallet']).__eq__('QIWI –∫–æ—à–µ–ª—ë–∫'):
            await callback.message.edit_text(
                text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –∫–æ—à–µ–ª—å–∫—É',
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥',
                reply_markup=kb)
    # –ö–æ–¥ –¥–ª—è –∫—É–ø–∏—Ç—å
    if ((await state.get_data())['action']).__eq__('üí∞ –ö—É–ø–∏—Ç—å'):
        await callback.message.edit_text(
            text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ BTC.'
                 ' –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É BTC (Bitcoin), –ø—Ä–∏ —ç—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ "BTC" –≤ –∫–æ–Ω—Ü–µ.' + '\n' +
                 '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: ' + str(
                (await state.get_data())['value_buy']) + ' —Ä—É–±',
            reply_markup=kb)
    await state.update_data(last_msg=callback.message.message_id)
    await state.set_state('num_sum')
    await check_time(callback.message, state)


#  –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –±—ã–ª–∏ –≤ –ø–∞—Ä—Å–µ—Ä–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—ã ()
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state='parser')
async def back_to_select_wallet(callback: types.CallbackQuery,
                                state: FSMContext):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    await state.update_data(num_card_for_sold=None)
    await state.update_data(sum_for_buy=None)
    # –ö–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞—Ç—å
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        if ((await state.get_data())['wallet']).__eq__('–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏') or (
                (await state.get_data())['wallet']).__eq__('QIWI –∫–æ—à–µ–ª—ë–∫'):
            await callback.message.edit_text(
                text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –∫–æ—à–µ–ª—å–∫—É',
                reply_markup=kb)
        else:
            await callback.message.edit_text(
                text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥',
                reply_markup=kb)
    # –ö–æ–¥ –¥–ª—è –∫—É–ø–∏—Ç—å
    if ((await state.get_data())['action']).__eq__('üí∞ –ö—É–ø–∏—Ç—å'):
        await callback.message.edit_text(
            text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ BTC.'
                 ' –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É BTC (Bitcoin), –ø—Ä–∏ —ç—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ "BTC" –≤ –∫–æ–Ω—Ü–µ.' + '\n' +
                 '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: ' + str(
                (await state.get_data())['value_buy']) + ' —Ä—É–±',
            reply_markup=kb)
    await state.set_state('num_sum')
    await check_time(callback.message, state)


# –ü–∞—Ä—Å–µ—Ä –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—ã
@dp.message_handler(state='num_sum')
async def numFics(message: types.Message, state: FSMContext):
    try:
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=(await state.get_data())['last_msg'],
            reply_markup=InlineKeyboardMarkup()
        )
    except:
        pass
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        if ((await state.get_data())['wallet']).__eq__('–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏') or ((
                await state.get_data())['wallet']).__eq__('QIWI –∫–æ—à–µ–ª—ë–∫'):
            result = re.findall(r"^\s*\+?[78]9\d{9}\s*$", message.text)
            if not result:
                await message.answer(
                    text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    reply_markup=kb)
                await check_time(message, state)
                return
        else:
            if is_not_float(str(message.text)):
                await message.answer(
                    text="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–µ–Ω (–ù–æ–º–µ—Ä –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
                    reply_markup=kb)
                await check_time(message, state)
                return
            if is_float(str(message.text)) and len(
                    str(message.text)) != 16:  # –µ—Å–ª–∏ —ç—Ç–æ —Ñ–ª–æ—Ç
                await message.answer(
                    text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤)",
                    reply_markup=kb)
                await check_time(message, state)
                return
        our_num = message.text
        await message.answer(
            text='–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å BTC.'
                 ' –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É BTC (Bitcoin), –ø—Ä–∏ —ç—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ "BTC" –≤ –∫–æ–Ω—Ü–µ.' + '\n' +
                 '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: ' + str(
                (await state.get_data())['value_sold']) + ' —Ä—É–±',
            reply_markup=kb)

        await state.update_data(num_card_for_sold=str(our_num))
    if ((await state.get_data())['action']).__eq__('üí∞ –ö—É–ø–∏—Ç—å'):
        string = message.text.lower()
        flag_btc = False
        if string.endswith('btc'):
            flag_btc = True
            string = string.replace('btc', '')

        if is_not_float(string):
            await message.answer(
                text=f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>" + '\n' +
                     f"–ü—Ä–∏–º–µ—Ä 1: 0.00324 BTC\n"
                     f"–ü—Ä–∏–º–µ—Ä 2: 7500",
                reply_markup=kb,
                parse_mode='HTML')
            await check_time(message, state)
            return
        our_sum = float(string)
        print(our_sum)
        if flag_btc and (our_sum > 0.5 or our_sum < 0.00003):
            await message.answer(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ Bitcoin –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0.00003 –¥–æ 0.5 BTC",
                reply_markup=kb)
            await check_time(message, state)
            return
        if (not flag_btc) and (our_sum > 1500000 or our_sum < 100):
            await message.answer(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 100 –¥–æ 1500000",
                reply_markup=kb)
            await check_time(message, state)
            return
        await state.update_data(sum_for_buy=float(our_sum))
        await message.answer(
            text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è BTC (Bitcoin)",
            reply_markup=kb)
    await state.set_state('parser')  # —É—Å—Ç–∞–Ω–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    await check_time(message, state)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
@dp.message_handler(state='parser')
async def enter(message: types.Message, state: FSMContext):
    await spravka(message, state)
    await check_time(message, state)


async def spravka_sold_to_operator(message: types.Message, state: FSMContext):
    user = 'username' in message.chat
    lastn = 'last_name' in message.chat
    num = (await state.get_data())['sum_for_sold']
    await bot.send_message(text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{(await state.get_data())['order_id']}: " + message.chat.first_name + ' ' + (
        message.chat.last_name if lastn else '') +
                                (
                                    '\n' + 'username: @' + message.chat.username if user else '') + '\n'
                                + 'id: ' + str(message.chat.id) + '\n'
                                                                  '–ü—Ä–æ–¥–∞–∂–∞ ' +
                                (await state.get_data())['currency'] + '\n'
                                + '–°—É–º–º–∞: ' + (str(format(
        round(float(num) / (await state.get_data())['value_sold'], 5),
        '.5f')) if (float(num) >= 100 and float(num) <= 1500000) else str(
        format(round(num, 5), '.5f'))) + ' BTC' + '\n'
                                + '–î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ ' +
                                (await state.get_data())['wallet'] + '\n'
                                + '–ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: ' + (await state.get_data())[
                                    'num_card_for_sold'] + '\n'
                                + '–ü–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É: '
                                  f"{(await state.get_data())['value_sold']} "
                                  "—Ä—É–±–ª–µ–π\n"
                                + '–ö –æ–±—â–µ–π –≤—ã–ø–ª–∞—Ç–µ: ' +
                                (
                                    f"{round((await state.get_data())['value_buy'] * num, 2)} —Ä—É–±–ª–µ–π\n" if (
                                            float(num) > 0.00003 and float(
                                        num) <= 0.5) else str(
                                        num) + f" —Ä—É–±–ª–µ–π\n"),
                           chat_id=id_chat_request)


async def spravka_buy_to_operator(message: types.Message, state: FSMContext):
    user = 'username' in message.chat
    lastn = 'last_name' in message.chat
    num = (await state.get_data())['sum_for_buy']
    await bot.send_message(text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{(await state.get_data())['order_id']}: " + message.chat.first_name + ' ' + (
        message.chat.last_name if lastn else '') + (
                                    '\n' + 'username: @' + message.chat.username if user else '') + '\n'
                                + 'id: ' + str(message.chat.id) + '\n'
                                                                  '–ü–æ–∫—É–ø–∫–∞: ' +
                                (await state.get_data())['currency'] + '\n'
                                + '–°—É–º–º–∞: ' + (str(format(
        round(float(num) / (await state.get_data())['value_sold'], 5),
        '.5f')) if (float(num) >= 100 and float(num) <= 1500000) else str(
        format(round(num, 5), '.5f'))) + ' BTC' + '\n'
                                + (await state.get_data())['currency']
                                + ' –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä ' +
                                (await state.get_data())['num_wallet'] + '\n'+
                                '–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞: '+(await state.get_data())['wallet']+'\n'
                                + '–ü–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É: '
                                  f"{(await state.get_data())['value_buy']} "
                                  "—Ä—É–±–ª–µ–π\n"
                                + '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ' +
                                (
                                    f"{round((await state.get_data())['value_buy'] * num, 2)} —Ä—É–±–ª–µ–π\n" if (
                                            float(num) > 0.00003 and float(
                                        num) <= 0.5) else str(
                                        num) + f" —Ä—É–±–ª–µ–π\n")
                           , chat_id=id_chat_request)


async def spravka_sold(message: types.Message, state: FSMContext,
                       to_operator=False):
    kb = types.InlineKeyboardMarkup()
    if to_operator is False:
        kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data="Yes"))
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="NO"))
        num = (await state.get_data())['sum_for_sold']
    await bot.send_message(
        text=message.from_user.first_name + ', –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å ' +
             (await state.get_data())['currency'] + '\n'
             + '–°—É–º–º–∞: ' + (str(format(
            float(num) / (await state.get_data())['value_sold'], '.5f')) if (
                float(num) >= 100 and float(num) <= 1500000) else str(
            format(round(num, 5), '.5f'))) + ' BTC' + '\n'
             + '–î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ ' + (await state.get_data())[
                 'wallet'] + '\n'
             + '–ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: ' + (await state.get_data())[
                 'num_card_for_sold'] + '\n'
             + '–ü–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É: '
               f"{(await state.get_data())['value_sold']} "
               "—Ä—É–±–ª–µ–π\n"
             + '–ö –æ–±—â–µ–π –≤—ã–ø–ª–∞—Ç–µ: ' +
             (
                 f"{round((await state.get_data())['value_sold'] * num, 2)} —Ä—É–±–ª–µ–π\n" if (
                         float(num) > 0.00003 and float(num) <= 0.5) else str(
                     num) + f" —Ä—É–±–ª–µ–π\n")
             + '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É –∏ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏?',
        reply_markup=kb,
        chat_id=message.chat.id if not to_operator else id_chat_request)


async def spravka_buy(message: types.Message, state: FSMContext,
                      to_operator=False):
    kb = types.InlineKeyboardMarkup()
    if to_operator is False:
        kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data="Yes"))
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="NO"))
    num = (await state.get_data())['sum_for_buy']
    await bot.send_message(
        text=message.from_user.first_name + ', –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: ' +
             (await state.get_data())['currency'] + '\n'
             + '–°—É–º–º–∞: ' + (str(format(
            round(float(num) / (await state.get_data())['value_sold'], 5),
            '.5f')) if (float(num) >= 100 and float(num) <= 1500000) else str(
            format(round(num, 5), '.5f'))) + ' BTC' + '\n'
             + (await state.get_data())['currency'] + ' –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä ' +
             (await state.get_data())[
                 'num_wallet']
             + '\n'
             + '–ü–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É: '
               f"{(await state.get_data())['value_buy']} "
               f"—Ä—É–±–ª–µ–π\n"
             + '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ' +
             (
                 f"{round((await state.get_data())['value_buy'] * num, 2)} —Ä—É–±–ª–µ–π\n" if (
                         float(num) > 0.00003 and float(
                     num) <= 0.5) else str(num) + f" —Ä—É–±–ª–µ–π\n")
             + '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏?', reply_markup=kb,
        chat_id=message.chat.id if not to_operator else id_chat_request)


# –ü–∞—Ä—Å–µ—Ä
async def spravka(message: types.Message, state: FSMContext):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="‚óÄÔ∏è –ù–∞–∑–∞–¥"))

    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        string = message.text.lower()
        flag_btc = False
        if string.endswith('btc'):
            flag_btc = True
            string = string.replace('btc', '')

        if is_not_float(string):
            await message.answer(
                text=f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>" + '\n' +
                     f"–ü—Ä–∏–º–µ—Ä 1: 0.00324 BTC\n"
                     f"–ü—Ä–∏–º–µ—Ä 2: 7500",
                reply_markup=kb,
                parse_mode='HTML')
            await check_time(message, state)
            return
        our_sum = float(string)
        print(our_sum)
        if flag_btc and (our_sum > 0.5 or our_sum < 0.00003):
            await message.answer(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ Bitcoin –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0.00003 –¥–æ 0.5 BTC",
                reply_markup=kb)
            await check_time(message, state)
            return
        if (not flag_btc) and (our_sum > 1500000 or our_sum < 100):
            await message.answer(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 100 –¥–æ 1500000",
                reply_markup=kb)
            await check_time(message, state)
            return
        await state.update_data(sum_for_sold=float(our_sum))
        await message.answer("–°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä–Ω–æ!")
        await spravka_sold(message, state)
    if ((await state.get_data())['action']).__eq__('üí∞ –ö—É–ø–∏—Ç—å'):
        right_btc = re.findall(r"^[13][a-zA-Z0-9]{25,34}$", message.text)
        if right_btc:
            await state.update_data(num_wallet=str(message.text))
            # await message.answer("–ö–æ—à–µ–ª–µ–∫ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            await spravka_buy(message, state)
        else:
            await message.answer(
                text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞. '
                     f'–û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 26-35 —Å–∏–º–≤–æ–ª–æ–≤,\n'
                     f'–∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è —Ü–∏—Ñ—Ä—ã, –ª–∞—Ç–∏–Ω—Å–∫–∏–µ '
                     f'–∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã',
                reply_markup=kb)
            await check_time(message, state)
            return

    await state.set_state('apply_request')


async def transfer_order(state: FSMContext):
    bot_id = (await bot.get_me())['id']
    bot_data = await storage.get_data(chat=bot_id, user=bot_id)
    if 'orders' not in bot_data:
        bot_data['orders'] = []
    bot_data['orders'].append(await state.get_data())
    await storage.update_data(chat=bot_id, user=bot_id, **bot_data)
    print("HI")
    print(await storage.get_data(chat=bot_id, user=bot_id))


async def add_order_id(state: FSMContext):
    bot_id = (await bot.get_me())['id']
    bot_data = await storage.get_data(chat=bot_id, user=bot_id)
    if 'orders' not in bot_data:
        bot_data['orders'] = []
    current_order_id = len(bot_data['orders']) + 100
    await state.update_data(order_id=current_order_id)


# –Ω–∞–∂–∞—Ç–∏–µ –î–∞
@dp.callback_query_handler(text="Yes", state="apply_request")
async def enter_Yes(callback: types.CallbackQuery, state: FSMContext):
    await add_order_id(state)
    await callback.message.edit_reply_markup(types.InlineKeyboardMarkup())
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        await spravka_sold_to_operator(callback.message, state)
    if ((await state.get_data())['action']).__eq__('üí∞ –ö—É–ø–∏—Ç—å'):
        await spravka_buy_to_operator(callback.message, state)
    text = f'–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.'
           #f'–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ –±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n\n' \
           #f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ' + support_link_2
    await transfer_order(state)
    await soft_state_finish(state)
    await callback.answer()
    print(f"XXX: {await state.get_data()}")
    await main_menu(callback.message, state, text)
    await check_time(callback.message, state)


# –Ω–∞–∂–∞—Ç–∏–µ –ù–µ—Ç
@dp.callback_query_handler(text="NO", state="apply_request")
async def enter_NO(callback: types.CallbackQuery, state: FSMContext):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                      callback_data='back_main_menu'))
    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ",
                                      callback_data='back_one_step'))
    await callback.message.edit_text(
        "–í–æ–∑–º–æ–∂–Ω–æ –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏.", reply_markup=kb)
    await check_time(callback.message, state)


@dp.callback_query_handler(text="back_one_step", state="*")
async def enter_NO_back_one_step(callback: types.CallbackQuery,
                                 state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    if ((await state.get_data())['action']).__eq__('üí∏ –ü—Ä–æ–¥–∞—Ç—å'):
        await spravka_sold(callback.message, state)
    if ((await state.get_data())['action']).__eq__('üí∞ –ö—É–ø–∏—Ç—å'):
        await spravka_buy(callback.message, state)
    await check_time(callback.message, state)


@dp.callback_query_handler(text="back_main_menu", state="*")
async def enter_NO_back_to_mian_menu(callback: types.CallbackQuery,
                                     state: FSMContext):
    await soft_state_finish(state)
    await callback.message.delete()
    await main_menu(callback.message, state)
    await check_time(callback.message, state)


# ===============================================================–ü–†–û–§–ò–õ–¨===========================================================================

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', state='*')
async def profile(message: types.Message, state: FSMContext):
    me = await bot.get_me()
    name = message.from_user.username if 'username' in message.from_user \
        else message.from_user.first_name
    await main_menu(message, state,
                    f'–£–≤–∞–∂–∞–µ–º—ã–π @{name}\n'
                    f'–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {(await state.get_data())["score"]}\n'
                    f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: '
                    f'{len((await state.get_data())["referrals"])}\n'
                    f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: '
                    f'https://t.me/{me.username}?start='
                    f'{message.from_user.id}\n')
    await check_time(message, state)

    # print()
    # await state.set_state('support')


# @dp.message_handler()
# async def echo(message: types.Message, state: FSMContext):
#     await message.answer(message.text)

# Support button
@dp.message_handler(Text(equals='üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞'), state='*')
async def support(message: types.Message, state: FSMContext):
    chat_1 = hlink(' –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'https://t.me/benefitsar_support')
    chat_2 = hlink(' –ö–∞–Ω–∞–ª ¬´–ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä¬ª', 'https://t.me/benefitsar')
    chat_3 = hlink(' –ü—Ä–æ–±–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'https://t.me/benefitsar_probiv_bot')
    chat_4 = hlink(' –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∏—Å–∫–∏ 550/639',
                   'https://t.me/benefitsar_639_bot')
    chat_5 = hlink(' –ê—Ä–µ—Å—Ç—ã –§–°–°–ü', 'https://t.me/benefitsar_fssp_bot')
    chat_6 = hlink(' –ë—É–º –ù–î–° –æ—Ç 1,3%', 'https://t.me/benefitsar_nds')
    chat_7 = hlink(' –ö—ç—à –æ—Ç 13%', 'https://t.me/benefitsar_cash')
    await main_menu(message, state,
                    '‚ùóÔ∏è–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.' + '\n\n'
                    + '-' + chat_1 + '\n\n'
                    + '‚ÄºÔ∏è –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã:' + '\n'
                    + '-' + chat_2 + '\n'
                    + '-' + chat_3 + '\n'
                    + '-' + chat_4 + '\n'
                    + '-' + chat_5 + '\n'
                    + '-' + chat_6 + '\n'
                    + '-' + chat_7)
    await check_time(message, state)


# Support button
# lambda message: message.text.lower() == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'
# @dp.message_handler(Text(equals='–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
# async def support(message: types.Message, state: FSMContext):
#     await message.answer("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ ‚Äî "
#                          "[BEN] –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
#                          reply_markup=types.ReplyKeyboardRemove())
#     await state.set_state('support')

# @dp.message_handler(state='support')
# async def echo(message: types.Message, state: FSMContext):
#     markup = types.ReplyKeyboardMarkup(
#         resize_keyboard=True,
#         selective=True,
#         one_time_keyboard=True
#     )
#     markup.add("–ö—É–ø–∏—Ç—å")
#     markup.add("–ü—Ä–æ–¥–∞—Ç—å")
#     markup.add("–ü—Ä–æ—Ñ–∏–ª—å")
#     markup.add("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
#     await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
#                          reply_markup=markup)
#     await state.set_state('main_menu')
#     await soft_state_finish(state)  # —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª—å—à–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

@dp.callback_query_handler(state='*')
async def any_callback(callback: types.CallbackQuery, state: FSMContext):
    print('No one callback handler')
    print(f"{await state.get_state()=}")
    print(f"{callback.data=}")
    # –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –ø—É—Å—Ç—É—é
    await callback.message.edit_reply_markup(InlineKeyboardMarkup())
    # await bot.send_message(chat_id=id_chat_request,reply_markup=types.ReplyKeyboardRemove(),text="*")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
